



struct send_tcp
    {
        struct iphdr ip;
        struct tcphdr tcp;
        char payload[10000];
    } send_tcp;

    struct pseudo_header
    {
        unsigned int source_address;
        unsigned int dest_address;
        unsigned char placeholder;
        unsigned char protocol;
        unsigned short tcp_length;
        struct tcphdr tcp;
    } pseudo_header;

    struct sockaddr_in sin;


    //set ip info and length
    send_tcp.ip.ihl = 5;
    send_tcp.ip.version = 4;
    send_tcp.ip.tos = 0;
    send_tcp.ip.tot_len = htons(40);
    send_tcp.ip.id =(int)(255.0*rand()/(RAND_MAX+1.0));

    send_tcp.ip.frag_off = 0;
    send_tcp.ip.ttl = 64;
    send_tcp.ip.protocol = IPPROTO_TCP;
    send_tcp.ip.check = 0;
    send_tcp.ip.saddr = iph->daddr;
    send_tcp.ip.daddr = iph->saddr;

    //set tcp info
    send_tcp.tcp.source = tcph->dest;
    send_tcp.tcp.dest = tcph->source;


    send_tcp.tcp.th_ack = tcph->seq + 1;
    send_tcp.tcp.res1 = 0;
    send_tcp.tcp.doff = 5;
    send_tcp.tcp.fin = 0;
    send_tcp.tcp.syn = 0;
    send_tcp.tcp.rst = 0;
    send_tcp.tcp.psh = 1;
    send_tcp.tcp.ack = 1;
    send_tcp.tcp.urg = 0;
    send_tcp.tcp.res2 = 0;
    send_tcp.tcp.window = htons(512);
    send_tcp.tcp.check = 0;
    send_tcp.tcp.urg_ptr = 0;

    sin.sin_family = AF_INET;
    sin.sin_port = send_tcp.tcp.source;
    sin.sin_addr.s_addr = send_tcp.ip.daddr;

    int send_socket = socket(AF_INET, SOCK_RAW, IPPROTO_RAW);
    if(send_socket < 0)
    {
        perror("send socket cannot be open. Are you root?");
        exit(1);
    }

    int on = 1;
    if (setsockopt (send_socket, IPPROTO_IP, IP_HDRINCL, &on, sizeof (on)) < 0) {
        perror ("setsockopt() failed to set IP_HDRINCL ");
        exit (EXIT_FAILURE);
    }

    /* Make IP header checksum */
    send_tcp.ip.check = in_cksum((unsigned short *)&send_tcp.ip, 20);
    /* Final preparation of the full header */

    /* From synhose.c by knight */
    pseudo_header.source_address = send_tcp.ip.saddr;
    pseudo_header.dest_address = send_tcp.ip.daddr;
    pseudo_header.placeholder = 0;
    pseudo_header.protocol = IPPROTO_TCP;
    pseudo_header.tcp_length = htons(20);

    uint8_t *packet = (uint8_t *)malloc(IP_MAXPACKET * sizeof(uint8_t));

    bcopy((char *)&send_tcp.tcp, (char *)&pseudo_header.tcp, 20);
    /* Final checksum on the entire package */
    send_tcp.tcp.check = in_cksum((unsigned short *)&pseudo_header, 32);

    bcopy((char *)&send_tcp.tcp, (char *)&pseudo_header.tcp, 20);
    /* Final checksum on the entire package */
    send_tcp.tcp.check = in_cksum((unsigned short *)&pseudo_header, 32);

    sendto(send_socket, &send_tcp, 40 + (sizeof(char) * 1000), 0, (struct sockaddr *)&sin, sizeof(sin));


    //    const int IP4_HDRLEN = 20;
    //    const int TCP_HDRLEN = 20;

        // First part is an IPv4 header.
    //    memcpy (packet, &send_tcp.ip, IP4_HDRLEN * sizeof (uint8_t));

        // Next part of packet is upper layer protocol header.
    //    memcpy ((packet + IP4_HDRLEN), &send_tcp.tcp, TCP_HDRLEN * sizeof (uint8_t));

        // Last part is upper layer protocol data.
    //    memcpy ((packet + IP4_HDRLEN + TCP_HDRLEN), payload, payloadlen * sizeof (uint8_t));


        /* Away we go.... */
    //    sendto(send_socket, packet, IP4_HDRLEN + TCP_HDRLEN + payloadlen, 0, (struct sockaddr *)&sin, sizeof(sin));
        //printf("Sending Data: %c\n",ch);
